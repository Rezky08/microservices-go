// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: limit.proto

package limit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LimitServiceClient is the client API for LimitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LimitServiceClient interface {
	CreateLimit(ctx context.Context, in *LimitCreate, opts ...grpc.CallOption) (*LimitCreateResponse, error)
	UpdateLimit(ctx context.Context, in *LimitUpdate, opts ...grpc.CallOption) (*LimitUpdateResponse, error)
	DetailLimit(ctx context.Context, in *LimitDetail, opts ...grpc.CallOption) (*LimitDetailResponse, error)
	DeleteLimit(ctx context.Context, in *LimitDelete, opts ...grpc.CallOption) (*LimitUpdateResponse, error)
}

type limitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLimitServiceClient(cc grpc.ClientConnInterface) LimitServiceClient {
	return &limitServiceClient{cc}
}

func (c *limitServiceClient) CreateLimit(ctx context.Context, in *LimitCreate, opts ...grpc.CallOption) (*LimitCreateResponse, error) {
	out := new(LimitCreateResponse)
	err := c.cc.Invoke(ctx, "/limit.LimitService/CreateLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitServiceClient) UpdateLimit(ctx context.Context, in *LimitUpdate, opts ...grpc.CallOption) (*LimitUpdateResponse, error) {
	out := new(LimitUpdateResponse)
	err := c.cc.Invoke(ctx, "/limit.LimitService/UpdateLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitServiceClient) DetailLimit(ctx context.Context, in *LimitDetail, opts ...grpc.CallOption) (*LimitDetailResponse, error) {
	out := new(LimitDetailResponse)
	err := c.cc.Invoke(ctx, "/limit.LimitService/DetailLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitServiceClient) DeleteLimit(ctx context.Context, in *LimitDelete, opts ...grpc.CallOption) (*LimitUpdateResponse, error) {
	out := new(LimitUpdateResponse)
	err := c.cc.Invoke(ctx, "/limit.LimitService/DeleteLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LimitServiceServer is the server API for LimitService service.
// All implementations must embed UnimplementedLimitServiceServer
// for forward compatibility
type LimitServiceServer interface {
	CreateLimit(context.Context, *LimitCreate) (*LimitCreateResponse, error)
	UpdateLimit(context.Context, *LimitUpdate) (*LimitUpdateResponse, error)
	DetailLimit(context.Context, *LimitDetail) (*LimitDetailResponse, error)
	DeleteLimit(context.Context, *LimitDelete) (*LimitUpdateResponse, error)
	mustEmbedUnimplementedLimitServiceServer()
}

// UnimplementedLimitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLimitServiceServer struct {
}

func (UnimplementedLimitServiceServer) CreateLimit(context.Context, *LimitCreate) (*LimitCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLimit not implemented")
}
func (UnimplementedLimitServiceServer) UpdateLimit(context.Context, *LimitUpdate) (*LimitUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLimit not implemented")
}
func (UnimplementedLimitServiceServer) DetailLimit(context.Context, *LimitDetail) (*LimitDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailLimit not implemented")
}
func (UnimplementedLimitServiceServer) DeleteLimit(context.Context, *LimitDelete) (*LimitUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLimit not implemented")
}
func (UnimplementedLimitServiceServer) mustEmbedUnimplementedLimitServiceServer() {}

// UnsafeLimitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LimitServiceServer will
// result in compilation errors.
type UnsafeLimitServiceServer interface {
	mustEmbedUnimplementedLimitServiceServer()
}

func RegisterLimitServiceServer(s grpc.ServiceRegistrar, srv LimitServiceServer) {
	s.RegisterService(&LimitService_ServiceDesc, srv)
}

func _LimitService_CreateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LimitCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitServiceServer).CreateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/limit.LimitService/CreateLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitServiceServer).CreateLimit(ctx, req.(*LimitCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _LimitService_UpdateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LimitUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitServiceServer).UpdateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/limit.LimitService/UpdateLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitServiceServer).UpdateLimit(ctx, req.(*LimitUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _LimitService_DetailLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LimitDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitServiceServer).DetailLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/limit.LimitService/DetailLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitServiceServer).DetailLimit(ctx, req.(*LimitDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _LimitService_DeleteLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LimitDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitServiceServer).DeleteLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/limit.LimitService/DeleteLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitServiceServer).DeleteLimit(ctx, req.(*LimitDelete))
	}
	return interceptor(ctx, in, info, handler)
}

// LimitService_ServiceDesc is the grpc.ServiceDesc for LimitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LimitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "limit.LimitService",
	HandlerType: (*LimitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLimit",
			Handler:    _LimitService_CreateLimit_Handler,
		},
		{
			MethodName: "UpdateLimit",
			Handler:    _LimitService_UpdateLimit_Handler,
		},
		{
			MethodName: "DetailLimit",
			Handler:    _LimitService_DetailLimit_Handler,
		},
		{
			MethodName: "DeleteLimit",
			Handler:    _LimitService_DeleteLimit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "limit.proto",
}
